package main

import (
	"fmt"
	"mapreduce"
	"os"
	"strconv"
	"unicode"
)

//
// The map function is called once for each file of input. The first
// argument is the name of the input file, and the second is the
// file's complete contents. You should ignore the input file name,
// and look only at the contents argument. The return value is a slice
// of key/value pairs.
//
func mapF(filename string, contents string) []mapreduce.KeyValue {
	// TODO: you have to write this function
	pairs := make([]mapreduce.KeyValue, 0)
	from := 0
	for i, c := range contents {
		// i是数字，表示坐标，后缀指针
		// c是单词
	  if !unicode.IsLetter(c) {
		if i - from > 0 {
		//   fmt.Printf(contents[from : i])
		//   contents[from : i] 一个单词
		// KeyValue是common.go中一个结构，一个对象包含key和value两个属性
		// 这个地方不对，对应的key应该是的
		  pair := mapreduce.KeyValue{contents[from : i], "0"}
		//   append是合并数组的意思
		// 这里不应该是合并数组
		  pairs = append(pairs, pair)
		}
		// 这里将from前缀指针更新
		from = i + 1
	  }
	}
	return pairs
}

//
// The reduce function is called once for each key generated by the
// map tasks, with a list of all the values created for that key by
// any map task.
//
func reduceF(key string, values []string) string {
	// TODO: you also have to write this function
	// fmt.Printf("%s", values)
	return strconv.Itoa(len(values))
}

// Can be run in 3 ways:
// 1) Sequential (e.g., go run wc.go master sequential x1.txt .. xN.txt)
// 2) Master (e.g., go run wc.go master localhost:7777 x1.txt .. xN.txt)
// 3) Worker (e.g., go run wc.go worker localhost:7777 localhost:7778 &)
func main() {
	if len(os.Args) < 4 {
		fmt.Printf("%s: see usage comments in file\n", os.Args[0])
	} else if os.Args[1] == "master" {
		var mr *mapreduce.Master
		if os.Args[2] == "sequential" {
			// lib2 走的这个分支
			// os.Args[3:][pg-being_ernest.txt pg-dorian_gray.txt pg-dracula.txt pg-emma.txt pg-frankenstein.txt pg-great_expectations.txt pg-grimm.txt pg-huckleberry_finn.txt pg-les_miserables.txt pg-metamorphosis.txt pg-moby_dick.txt pg-sherlock_holmes.txt pg-tale_of_two_cities.txt pg-tom_sawyer.txt pg-ulysses.txt pg-war_and_peace.txt]
			mr = mapreduce.Sequential("wcseq", os.Args[3:], 3, mapF, reduceF)
		} else {
			mr = mapreduce.Distributed("wcseq", os.Args[3:], 3, os.Args[2])
		}
		mr.Wait()
	} else {
		mapreduce.RunWorker(os.Args[2], os.Args[3], mapF, reduceF, 100)
	}
}
